{
  "questions": [
    {
      "question": "Analysis pattern",
      "answer": [
        "A group of concepts that represents a common construction in business modeling.",
        "It may be relevant to only one domain or may span many domains"
      ]
    },
    {
      "question": "Assertion",
      "answer": [
        "A statement of the correct state of a program at some point, independent of how it does it.",
        "Typically an assertion specifies the result of an operation or an invariant of a design element."
      ]
    },
    {
      "question": "Bounded context",
      "answer": [
        "The delimited applicability of a particular model.",
        "Bounding contexts gives team members a clear and shared understanding of what has to be consistent and what can develop independently"
      ]
    },
    {
      "question": "Client",
      "answer": [
        "A program element that is calling the element under design, using its capabilities"
      ]
    },
    {
      "question": "Cohesion",
      "answer": [
        "Logical agreement and dependence"
      ]
    },
    {
      "question": "Command",
      "answer": [
        "An operation that effects some change to the system. An operation that intentionally creates a side effect"
      ]
    },
    {
      "question": "Conceptual contour",
      "answer": [
        "An underlying consistency of the domain itself, which if reflected in a model, can help the design accommodate change more naturally"
      ]
    },
    {
      "question": "Context map",
      "answer": [
        "A representation of the bounded contexts involved in a project and the actual relationships between them and there models"
      ]
    },
    {
      "question": "Core domain",
      "answer": [
        "The distinctive part of the model, central to the user's goals, that differentiates the application and makes it valuable"
      ]
    },
    {
      "question": "Declarative design",
      "answer": [
        "A form of programming in which a precise description of properties actually controls the software.",
        "An executable specification"
      ]
    },
    {
      "question": "Deep model",
      "answer": [
        "An incisive expression of the primary concerns of the domain experts and their most relevant knowledge.",
        "A deep model sloughs off superficial aspects of the domain and naive interpretations"
      ]
    },
    {
      "question": "Design pattern",
      "answer": [
        "A description of communicating objects and classes that are customised to solve a general design problem in a particular context"
      ]
    },
    {
      "question": "Domain",
      "answer": [
        "A sphere of knowledge, influence or activity"
      ]
    },
    {
      "question": "Distillation",
      "answer": [
        "A process of separating the components of a mixture to extract the essence in a form that makes it more valuable and useful.",
        "In software design, the abstraction of key aspects in a model or the partitioning of a larger system to bring the core domain to the fore."
      ]
    },
    {
      "question": "Domain expert",
      "answer": [
        "A member of a software project whose field is the domain of the application, rather than software development.",
        "Not just any user of the software, the domain expert has deep knowledge of the subject."
      ]
    },
    {
      "question": "Domain layer",
      "answer": [
        "The portion of the design and implementation responsible for domain logic within a layered architecture.",
        "The domain layer is where the software of the domain model lives."
      ]
    },
    {
      "question": "Entity",
      "answer": [
        "An object fundamentally defined not by its attributes but by a thread of continuity and identity"
      ]
    },
    {
      "question": "Implicit concept",
      "answer": [
        "A concept that is necessary to understand the meaning of a model or design but is never mentioned"
      ]
    },
    {
      "question": "Intention - revealing interface",
      "answer": [
        "A design in which the names of classes, methods and other elements convey both the original developer's purpose in creating them and their value to a client developer"
      ]
    },
    {
      "question": "Invariant",
      "answer": [
        "An assertion about some design element that must be true at all times.",
        "Except during specifically transient situations such as the middle of the execution of a method,",
        "or the middle of an uncommitted database transaction"
      ]
    },
    {
      "question": "Iteration",
      "answer": [
        "A process in which a program is repeatedly improved in small steps"
      ]
    },
    {
      "question": "Layered architecture",
      "answer": [
        "A technique for separating the concerns of a software system, isolating a domain layer, among other things"
      ]
    },
    {
      "question": "Life cycle",
      "answer": [
        "A sequence of states an object can take on between creation and deletion.",
        "Typically with constraints to ensure integrity when changing from one state to another.",
        "May include migration of an entity between systems and different bounded contexts"
      ]
    },
    {
      "question": "Model",
      "answer": [
        "A system of abstractions that describes selected aspects of a domain and can be used to solve problems related to the domain"
      ]
    },
    {
      "question": "Model-driven design",
      "answer": [
        "A design in which some subset of software elements corresponds closely to elements of a model.",
        "Also, a process of co-developing a model and an implementation that stay aligned with each other"
      ]
    },
    {
      "question": "Modeling paradigm",
      "answer": [
        "A particular style of carving out concepts in a domain, combined with tools to create software analogs of those concepts"
      ]
    },
    {
      "question": "Repository",
      "answer": [
        "A mechanism for encapsulating storage, retrieval and search behaviour which emulates a collection of objects"
      ]
    },
    {
      "question": "Service",
      "answer": [
        "An operation offered as an interface that stands alone in the model, with no encapsulated state"
      ]
    },
    {
      "question": "Stand alone class",
      "answer": [
        "A class that can be understood and tested without reference to any others except system primitives and basic libraries"
      ]
    },
    {
      "question": "Stateless",
      "answer": [
        "The property of a design element that allows a client to use any of its operations without regard to the elements history.",
        "A stateless element may use information that is accessible globally and may even change that global information, but holds no private state that affects its behaviour"
      ]
    },
    {
      "question": "Strategic design",
      "answer": [
        "Modeling and design decisions that apply to large parts of the system.",
        "Such decisions affect the entire project and have to be decided at the team level"
      ]
    },
    {
      "question": "Supple design",
      "answer": [
        "A design that puts the power inherent in a deep model into the hands of a client developer to make, clear, flexible expressions that give expected results robustly",
        "Equally important, it leverages that some deep model to make the design itself easy for the implementer to model and reshape to accommodate new insight"
      ]
    },
    {
      "question": "Ubiquitous language",
      "answer": [
        "A language structured around the domain model and used by all team members to connect all the activities of the team with the software"
      ]
    },
    {
      "question": "Unification",
      "answer": [
        "The internal consistency of a model such that each term is unambiguous and no rules contradict"
      ]
    }
  ]
}